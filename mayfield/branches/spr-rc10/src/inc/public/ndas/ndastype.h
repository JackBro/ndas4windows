/*++

  NDAS USER API Type Definitions

  Copyright (C) 2002-2004 XIMETA, Inc.
  All rights reserved.

  Remarks:

  This header contains the structures for using NDAS USER API.

--*/

#ifndef _NDAS_TYPE_H_
#define _NDAS_TYPE_H_

#pragma once

/* All structures in this header are 8-byte unaligned. */
#include <pshpack8.h>

/* Constants */

#define NDAS_DEVICE_ID_KEY_LEN         20
#define NDAS_DEVICE_WRITE_KEY_LEN      5

#define NDAS_DEVICE_STRING_ID_PART_LEN 5
#define NDAS_DEVICE_STRING_ID_PARTS    4
#define NDAS_DEVICE_STRING_ID_LEN \
	(NDAS_DEVICE_STRING_ID_PART_LEN * NDAS_DEVICE_STRING_ID_PARTS)

#define NDAS_DEVICE_STRING_KEY_LEN     5
#define MAX_NDAS_DEVICE_NAME_LEN       31 /* excluding NULL character */
#define MAX_NDAS_REGISTRATION_DATA     252

#define NDAS_BLOCK_SIZE					512

/* NDAS Unit Device Type */

typedef WORD NDAS_UNITDEVICE_TYPE;

/* <COMBINE NDAS_UNITDEVICE_TYPE> */
#define NDAS_UNITDEVICE_TYPE_UNKNOWN        0x00
/* <COMBINE NDAS_UNITDEVICE_TYPE> */
#define NDAS_UNITDEVICE_TYPE_DISK           0x01
/* <COMBINE NDAS_UNITDEVICE_TYPE> */
#define NDAS_UNITDEVICE_TYPE_COMPACT_BLOCK  0x02
/* <COMBINE NDAS_UNITDEVICE_TYPE> */
#define NDAS_UNITDEVICE_TYPE_CDROM          0x10
/* <COMBINE NDAS_UNITDEVICE_TYPE> */
#define NDAS_UNITDEVICE_TYPE_OPTICAL_MEMORY 0x11

/* NDAS Unit Disk Device Type */

typedef WORD NDAS_UNITDEVICE_DISK_TYPE;

/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_UNKNOWN       0x0000
/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_SINGLE        0x1000
/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_VIRTUAL_DVD   0x8000
/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_AGGREGATED    0xA000
/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_MIRROR_MASTER 0xB000
/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_MIRROR_SLAVE  0xB100
/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_RAID0         0xC000
/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_RAID1         0xC001
/* <COMBINE NDAS_UNITDEVICE_DISK_TYPE> */
#define NDAS_UNITDEVICE_DISK_TYPE_RAID4         0xC004

/* NDAS Unit CDROM Device Type */

typedef WORD NDAS_UNITDEVICE_CDROM_TYPE;

/* <COMBINE NDAS_UNITDEVICE_CDROM_TYPE> */
#define NDAS_UNITDEVICE_CDROM_TYPE_UNKNOWN 0x0000
/* <COMBINE NDAS_UNITDEVICE_CDROM_TYPE> */
#define NDAS_UNITDEVICE_CDROM_TYPE_CD      0x0100
/* <COMBINE NDAS_UNITDEVICE_CDROM_TYPE> */
#define NDAS_UNITDEVICE_CDROM_TYPE_DVD     0x0200

/* NDAS Unit Optical Memory Device */
/* e.g. MO */

typedef WORD NDAS_UNITDEVICE_OPTICAL_MEMORY_TYPE;

/* <COMBINE NDAS_UNITDEVICE_OPTICAL_MEMORY_TYPE> */
#define NDAS_UNITDEVICE_OPTICAL_MEMORY_TYPE_UNKNOWN 0x0000
/* <COMBINE NDAS_UNITDEVICE_OPTICAL_MEMORY_TYPE> */
#define NDAS_UNITDEVICE_OPTICAL_MEMORY_TYPE_MO		0x0001

/* NDAS Compact Block Device */
/* e.g. Flash Card */

typedef WORD NDAS_UNITDEVICE_COMPACT_BLOCK_TYPE;

/* <COMBINE NDAS_UNITDEVICE_COMPACT_BLOCK_TYPE> */
#define NDAS_UNITDEVICE_COMPACT_BLOCK_TYPE_UNKNOWN		0x0000
/* <COMBINE NDAS_UNITDEVICE_COMPACT_BLOCK_TYPE> */
#define NDAS_UNITDEVICE_COMPACT_BLOCK_TYPE_FLASHCARD	0x0001

/* NDAS Unit Device Sub Type */

typedef struct _NDAS_UNITDEVICE_SUBTYPE {
	union {
		NDAS_UNITDEVICE_DISK_TYPE DiskDeviceType;
		NDAS_UNITDEVICE_CDROM_TYPE CDROMDeviceType;
		NDAS_UNITDEVICE_OPTICAL_MEMORY_TYPE OptMemDevType;
		NDAS_UNITDEVICE_COMPACT_BLOCK_TYPE CompactDevType;
	};

} NDAS_UNITDEVICE_SUBTYPE, *PNDAS_UNITDEVICE_SUBTYPE;

/* NDAS Device Status */

typedef DWORD NDAS_DEVICE_STATUS;

/* <COMBINE NDAS_DEVICE_STATUS> */
#define NDAS_DEVICE_STATUS_UNKNOWN      0x0000
/* <COMBINE NDAS_DEVICE_STATUS> */
#define NDAS_DEVICE_STATUS_DISABLED     0x0010
/* <COMBINE NDAS_DEVICE_STATUS> */
#define NDAS_DEVICE_STATUS_DISCONNECTED 0x0020
/* <COMBINE NDAS_DEVICE_STATUS> */
#define NDAS_DEVICE_STATUS_CONNECTED    0x0030


/* NDAS Device Alarm Status Flags */

typedef DWORD NDAS_DEVICE_ALARM_STATUSFLAGS;

/* <COMBINE NDAS_DEVICE_ALARM_STATUSFLAGS> */
#define NDAS_DEVICE_ALARM_STATUSFLAG_RECONNECT_PENDING  0x00000100
/* <COMBINE NDAS_DEVICE_ALARM_STATUSFLAGS> */
#define NDAS_DEVICE_ALARM_STATUSFLAG_MEMBER_FAULT       0x00000800
/* <COMBINE NDAS_DEVICE_ALARM_STATUSFLAGS> */
#define NDAS_DEVICE_ALARM_STATUSFLAG_RECOVERING         0x00001000

#define NDAS_DEVICE_ALARM_NORMAL              0
#define NDAS_DEVICE_ALARM_RECONNECTIONG       1
#define NDAS_DEVICE_ALARM_RECONNECTED         2
#define NDAS_DEVICE_ALARM_MEMBER_FAULT        3
#define NDAS_DEVICE_ALARM_RECOVERING          4
#define NDAS_DEVICE_ALARM_RECOVERRED          5

/* NDAS Device Error */

typedef DWORD NDAS_DEVICE_ERROR;

/* <COMBINE NDAS_DEVICE_ERROR> */
#define NDAS_DEVICE_ERROR_NONE                      0x0000
/* <COMBINE NDAS_DEVICE_ERROR> */
#define NDAS_DEVICE_ERROR_UNSUPPORTED_VERSION       0xFF10
/* <COMBINE NDAS_DEVICE_ERROR> */
#define NDAS_DEVICE_ERROR_LPX_SOCKET_FAILED         0xFF12
/* <COMBINE NDAS_DEVICE_ERROR> */
#define NDAS_DEVICE_ERROR_DISCOVER_FAILED           0xFF13
/* <COMBINE NDAS_DEVICE_ERROR> */
#define NDAS_DEVICE_ERROR_DISCOVER_TOO_MANY_FAILURE 0xFF14
/* <COMBINE NDAS_DEVICE_ERROR> */
#define NDAS_DEVICE_ERROR_FROM_SYSTEM               0xFF15
/* <COMBINE NDAS_DEVICE_ERROR> */
#define NDAS_DEVICE_ERROR_LOGIN_FAILED              0xFF16

/*@@NDAS_DEVICE_REG_FLAGS */
/* <TITLE NDAS_DEVICE_REG_FLAGS Macros > */
/* NDAS Device Registration Flags */

/* <COMBINE NDAS_DEVICE_REG_FLAGS> */
#define NDAS_DEVICE_REG_FLAG_NONE					0x00000000
/* <COMBINE NDAS_DEVICE_REG_FLAGS> */
/* Registration will be not preserved after reboot. */
#define NDAS_DEVICE_REG_FLAG_VOLATILE				0x00000001
/* <COMBINE NDAS_DEVICE_REG_FLAGS> */
/* This NDAS device is not shown in the list. */
#define NDAS_DEVICE_REG_FLAG_HIDDEN					0x00000002
/* <COMBINE NDAS_DEVICE_REG_FLAGS> */
/* Read-only Flags */
/* This NDAS device is automatically registered. */
#define NDAS_DEVICE_REG_FLAG_AUTO_REGISTERED		0x00010000

/* NDAS Unit Device Status */

typedef DWORD NDAS_UNITDEVICE_STATUS;

/* <COMBINE NDAS_UNITDEVICE_STATUS> */
#define NDAS_UNITDEVICE_STATUS_UNKNOWN     0x0000
/* <COMBINE NDAS_UNITDEVICE_STATUS> */
#define NDAS_UNITDEVICE_STATUS_NOT_MOUNTED 0x0020
/* <COMBINE NDAS_UNITDEVICE_STATUS> */
#define NDAS_UNITDEVICE_STATUS_MOUNTED     0x0030

/* NDAS Unit Device Error */

typedef DWORD NDAS_UNITDEVICE_ERROR;

/* <COMBINE NDAS_UNITDEVICE_ERROR> */
#define NDAS_UNITDEVICE_ERROR_NONE 0x0000

/* NDAS Logical Device ID */
/* 
NDAS Logical Device ID has a non-zero value other than the invalid one.
*/

typedef DWORD NDAS_LOGICALDEVICE_ID;

/* NULL value check function for NDAS Logical Device ID */
/* <COMBINE NDAS_LOGICALDEVICE_ID> */
#define INVALID_NDAS_LOGICALDEVICE_ID 0x0;

/* NDAS SCSI Location */
/* NDAS SCSI Location is a location identifier 
   which indicates where the NDAS logical device is located */
   
typedef struct _NDAS_SCSI_LOCATION {
	DWORD SlotNo;
	DWORD TargetID;
	DWORD LUN;
} NDAS_SCSI_LOCATION, *PNDAS_SCSI_LOCATION;

C_ASSERT(12 == sizeof(NDAS_SCSI_LOCATION));

/* NDAS Logical Device Status */

typedef DWORD NDAS_LOGICALDEVICE_STATUS;

/* <COMBINE NDAS_LOGICALDEVICE_STATUS> */
#define NDAS_LOGICALDEVICE_STATUS_UNKNOWN         0x0000
/* <COMBINE NDAS_LOGICALDEVICE_STATUS> */
#define NDAS_LOGICALDEVICE_STATUS_UNMOUNTED       0x0001
/* <COMBINE NDAS_LOGICALDEVICE_STATUS> */
#define NDAS_LOGICALDEVICE_STATUS_MOUNT_PENDING   0x0002
/* <COMBINE NDAS_LOGICALDEVICE_STATUS> */
#define NDAS_LOGICALDEVICE_STATUS_MOUNTED         0x0003
/* <COMBINE NDAS_LOGICALDEVICE_STATUS> */
#define NDAS_LOGICALDEVICE_STATUS_UNMOUNT_PENDING 0x0004
/* The following type is obsolete, do not use */
/* #define NDAS_LOGICALDEVICE_STATUS_NOT_MOUNTABLE   0x00FF */
/* <COMBINE NDAS_LOGICALDEVICE_STATUS> */
#define NDAS_LOGICALDEVICE_STATUS_NOT_INITIALIZED 0xFFFF

/* NDAS Logical Device Error */

typedef DWORD NDAS_LOGICALDEVICE_ERROR;

/* <COMBINE NDAS_LOGICALDEVICE_ERROR> */
#define NDAS_LOGICALDEVICE_ERROR_NONE           0x0000
/* The following type is obsolete, do not use */
/* #define NDAS_LOGICALDEVICE_ERROR_FROM_DRIVER    0xFF20 */
/* <COMBINE NDAS_LOGICALDEVICE_ERROR> */
#define NDAS_LOGICALDEVICE_ERROR_MISSING_MEMBER 0xFF30
/* The following type is obsolete, do not use */
/* #define NDAS_LOGICALDEVICE_ERROR_INVALID_MEMBER 0xFF40 */

/* NDAS Logical Device Type */

typedef DWORD NDAS_LOGICALDEVICE_TYPE;

/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_UNKNOWN			0x0000
/* #define NDAS_LOGICALDEVICE_TYPE_DISK            0x0010 */
/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_DISK_SINGLE     0x0011
/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_DISK_MIRRORED   0x0012
/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_DISK_AGGREGATED 0x0013
/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_DISK_RAID0     0x0014
/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_DISK_RAID1     0x0015
/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_DISK_RAID4     0x0016

/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define IS_NDAS_LOGICALDEVICE_TYPE_DISK_GROUP(x) \
	(0x0010 <= (x) && (x) <= 0x0019)

/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_DVD             0x0020
/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_VIRTUAL_DVD     0x002F

/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define IS_NDAS_LOGICALDEVICE_TYPE_DVD_GROUP(x) \
	((NDAS_LOGICALDEVICE_TYPE_DVD & (x)) == NDAS_LOGICALDEVICE_TYPE_DVD)

/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_MO              0x0030

/* <COMBINE NDAS_LOGICALDEVICE_TYPE> */
#define NDAS_LOGICALDEVICE_TYPE_FLASHCARD       0x0040

/* NDAS Logical Device Params */

typedef struct _NDAS_LOGICALDEVICE_PARAMS {
	union 
	{
		struct 
		{
			DWORD CurrentMaxRequestBlocks;
		};
		UCHAR Reserved[64];
	};
} NDAS_LOGICALDEVICE_PARAMS, *PNDAS_LOGICALDEVICE_PARAMS;

C_ASSERT(64 == sizeof(NDAS_LOGICALDEVICE_PARAMS));

/* NDAS Device Hardware Information
   
   See Also
   NDAS_LOGICALDEVICE_TYPE_DISK_RAID0, NdasCommConnect */

typedef struct _NDAS_DEVICE_HW_INFORMATION
{
	DWORD dwHwType;
	DWORD dwHwVersion;
	DWORD nSlots;
	DWORD nTargets;
	DWORD nMaxTargets;
	DWORD nMaxLUs;
	DWORD nMaxRequestBlocks;
	BYTE _Reserved_[36];
} NDAS_DEVICE_HW_INFORMATION, *PNDAS_DEVICE_HW_INFORMATION;

C_ASSERT(64 == sizeof(NDAS_DEVICE_HW_INFORMATION));

/*
 If you are to change the following structure fields,
 you should modify the following function:

 BOOL ConvertWideToAnsi(
	const PNDAS_UNITDEVICE_HW_INFORMATIONW pDataW, 
	PNDAS_UNITDEVICE_HW_INFORMATIONA pDataA)
*/


/* NDAS Unit Device Hardware Information */

typedef WORD NDAS_UNITDEVICE_MEDIA_TYPE;

/* <COMBINE NDAS_UNITDEVICE_MEDIA_TYPE> */
#define NDAS_UNITDEVICE_MEDIA_TYPE_UNKNOWN_DEVICE		0 /* Unknown(not supported) */
/* <COMBINE NDAS_UNITDEVICE_MEDIA_TYPE> */
#define NDAS_UNITDEVICE_MEDIA_TYPE_BLOCK_DEVICE			1 /* Non-packet mass-storage device (HDD) */
/* <COMBINE NDAS_UNITDEVICE_MEDIA_TYPE> */
#define NDAS_UNITDEVICE_MEDIA_TYPE_COMPACT_BLOCK_DEVICE 2 /* Non-packet compact storage device (Flash card) */
/* <COMBINE NDAS_UNITDEVICE_MEDIA_TYPE> */
#define NDAS_UNITDEVICE_MEDIA_TYPE_CDROM_DEVICE			3 /* CD-ROM device (CD/DVD) */
/* <COMBINE NDAS_UNITDEVICE_MEDIA_TYPE> */
#define NDAS_UNITDEVICE_MEDIA_TYPE_OPMEM_DEVICE			4 /* Optical memory device (MO) */


typedef struct _NDAS_UNITDEVICE_HW_INFORMATIONA
{
	BOOL bLBA   : 1;
	BOOL bLBA48 : 1;
	BOOL bPIO   : 1;
	BOOL bDMA   : 1;
	BOOL bUDMA  : 1; /* 4 */
	NDAS_UNITDEVICE_MEDIA_TYPE MediaType; /* 4 */
	DWORD nROHosts; /* 4 */
	DWORD nRWHosts; /* 4 */
	CHAR szModel[40 + 1]; /* 48 */
	CHAR szFwRev[8 + 1]; /* 16 */
	CHAR szSerialNo[40 + 1]; /* 48 */
	DWORD SectorCountLowPart; /* 4 */
	DWORD SectorCountHighPart; /* 4 */
} NDAS_UNITDEVICE_HW_INFORMATIONA, *PNDAS_UNITDEVICE_HW_INFORMATIONA;

C_ASSERT(116 == sizeof(NDAS_UNITDEVICE_HW_INFORMATIONA));

typedef struct _NDAS_UNITDEVICE_HW_INFORMATIONW
{
	BOOL bLBA   : 1;
	BOOL bLBA48 : 1;
	BOOL bPIO   : 1;
	BOOL bDMA   : 1;
	BOOL bUDMA  : 1;
	NDAS_UNITDEVICE_MEDIA_TYPE MediaType;
	DWORD nROHosts;
	DWORD nRWHosts;
	WCHAR szModel[40 + 1];
	WCHAR szFwRev[8 + 1];
	WCHAR szSerialNo[40 + 1];
	DWORD SectorCountLowPart;
	DWORD SectorCountHighPart;
} NDAS_UNITDEVICE_HW_INFORMATIONW, *PNDAS_UNITDEVICE_HW_INFORMATIONW;

C_ASSERT(208 == sizeof(NDAS_UNITDEVICE_HW_INFORMATIONW));

#ifdef UNICODE
#define NDAS_UNITDEVICE_HW_INFORMATION NDAS_UNITDEVICE_HW_INFORMATIONW
#define PNDAS_UNITDEVICE_HW_INFORMATION PNDAS_UNITDEVICE_HW_INFORMATIONW
#else
#define NDAS_UNITDEVICE_HW_INFORMATION NDAS_UNITDEVICE_HW_INFORMATIONA
#define PNDAS_UNITDEVICE_HW_INFORMATION PNDAS_UNITDEVICE_HW_INFORMATIONA
#endif

/* <TITLE NDAS_DEVICE_PARAMS>

NDAS Device Parameters 

*/

typedef struct _NDAS_DEVICE_PARAMS
{
	union 
	{
		struct
		{
			DWORD RegFlags; /* Registration Flags */
		};
		BYTE Reserved[64];
	};

} NDAS_DEVICE_PARAMS, *PNDAS_DEVICE_PARAMS;

C_ASSERT(64 == sizeof(NDAS_DEVICE_PARAMS));

/* <TITLE NDAS_UNITDEVICE_PARAMS>

NDAS Unit Device Parameters 

*/
typedef struct _NDAS_UNITDEVICE_PARAMS
{
	union 
	{
		BYTE Reserved[64];
	};

} NDAS_UNITDEVICE_PARAMS, *PNDAS_UNITDEVICE_PARAMS;

C_ASSERT(64 == sizeof(NDAS_UNITDEVICE_PARAMS));

/* End of packing */
#include <poppack.h>

#endif /* _NDAS_TYPE_H_ */
