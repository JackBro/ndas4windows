
@@Overview
<B>Purpose</B>

NDAS Heartbeat Listener (NDASHEAR) API enables programmers to
interact with a NDAS device directly With NDASHEAR,
programmers can detect NDAS Devices which are online.

<B>Developer Audience</B>

NDAS API's are designed for use by C/C++ programmers,
Familiarity with networking, NDAS devices and ATA commands
(to use make use of advanced features of NDASCOMM) is
required.

<B>Run-time Requirements</B>

NDAS API requires Windows 2000, Windows XP or Windows Server
2003 and a system with LPX protocol and Windows Socket 2.

@@NDAS Heartbeat API
This is the default topic text for new topics added with the
Doc-O-Matic editor. You can freely modify the text and
structure of new text by changing the template topics:

    * Open the Doc-O-Matic project "template.dox" located in
      your Doc-O-Matic/support directory.
    * The project contains a list of topics that you can
      freely modify.
    * You can even add your own topics and delete existing
      \ones.
    * Whatever is in the file "template.dtx" will be used as
      templates that you can choose from.

@@About NDAS Hear
<B>NDAS Heartbeat API</B>

NDAS Heartbeat API provides functions to gather NDAS
heartbeat packets in the networks.

Each NDAS device broadcasts a heartbeat packet in 5 second
interval. It contains the type and the version of the device.
Receiving this information, an application can find active
NDAS devices in the network and communicate with it using
NDASCOMM library.



Due to the technical restriction, NDAS Heartbeat library
cannot be used with NDAS service running, vice versa.



<COLOR Red>This library is provided to support manufacturing
processes and for diagnostic purpose. Do not redistribute
this library.</COLOR>

@@Using NDAS Hear
The general usage of the library is:



\1. Initialize NDAS Heartbeat library

\2. Register a notification

\3. Process a notification

\4. Unregister a notification

\5. Uninitialize NDAS Heartbeat library



Refer the following sample for usage.



This sample prints heartbeat packets to the standard output
for 30 seconds.


<CODE>

\#include \<windows.h\>
\#include \<tchar.h\>
\#include \<stdio.h\>
\#include \<ndashear.h\>

VOID
NdasHeartbeatCallback(
    CONST NDAS_DEVICE_HEARTBEAT_INFO* pHeartbeat,
    LPVOID lpContext)
{
    _tprintf(
        _T("device: %02X:%02X:%02X:%02X:%02X:%02X")
        _T(" local: %02X:%02X:%02X:%02X:%02X:%02X")
        _T(" type:%d")
        _T(" version:%d")
        _T("\\n"),
        pHeartbeat-\>deviceAddress[0], pHeartbeat-\>deviceAddress[1],
        pHeartbeat-\>deviceAddress[2], pHeartbeat-\>deviceAddress[3],
        pHeartbeat-\>deviceAddress[4], pHeartbeat-\>deviceAddress[5],
        pHeartbeat-\>localAddress[0], pHeartbeat-\>localAddress[1],
        pHeartbeat-\>localAddress[2], pHeartbeat-\>localAddress[3],
        pHeartbeat-\>localAddress[4], pHeartbeat-\>localAddress[5],
        pHeartbeat-\>type,
        pHeartbeat-\>version);
}

int print_ndas_heartbeat()
{
    BOOL fSuccess;
    HANDLE h;

    _tprintf(_T("Registering...\\n"));

    h = NdasHeartbeatRegisterNotification(NdasHeartbeatCallback, NULL);

    if (NULL == h)
    {
        _tprintf(_T("Registration Error %d\\n"), GetLastError());
        return 1;
    }

    _tprintf(_T("Waiting for a heartbeat for 30 seconds...\\n"));

    Sleep(30000);

    _tprintf(_T("Stopping...\\n"));

    fSuccess= NdasHeartbeatUnregisterNotification(h);

    if (!fSuccess)
    {
        _tprintf(_T("Unregister error %d\\n"), GetLastError());
        return 1;
    }

    return 0;
}

int __cdecl _tmain()
{
    int ret;
    HANDLE h;

    if (!NdasHeartbeatInitialize())
    {
        _tprintf(_T("Init Error %d\\n"), GetLastError());
        return 1;
    }

    ret = print_ndas_heartbeat();

    if (!NdasHeartbeatUninitialize())
    {
        _tprintf(_T("Uninit error %d\\n"), GetLastError());
    }

    return ret;
}

</CODE>
