#ifndef LSMP_IOCTL_H
#define LSMP_IOCTL_H

/********************************************************************

	created:	2003/12/15
	created:	15:12:2003   19:51
	filename: 	LANSCSISYSTEMV2\SRC\INC\DRIVER\LSMPIoctl.h
	file path:	LANSCSISYSTEMV2\SRC\INC\DRIVER
	author:		XiMeta
	
	purpose:	IO control code and structure of LanScsiMiniport

*********************************************************************/

#include "lanscsi.h"
#include "SocketLpx.h"

//
//	define IOCTL code rule.
//
#ifndef CTL_CODE

#define CTL_CODE( DeviceType, Function, Method, Access ) \
	(((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method))
#define METHOD_BUFFERED                 0
#define METHOD_IN_DIRECT                1
#define METHOD_OUT_DIRECT               2
#define METHOD_NEITHER                  3
#define FILE_ANY_ACCESS                 0
#define FILE_READ_ACCESS          ( 0x0001 )    // file & pipe
#define FILE_WRITE_ACCESS         ( 0x0002 )    // file & pipe

#endif

//
//	define LanscsiMiniport ioctl rule.
//
#define NDASSCSI_DEVICE_TYPE 0x89e9
#define NDASSCSI_CTL_CODE(x) \
	CTL_CODE(NDASSCSI_DEVICE_TYPE, x, METHOD_BUFFERED, FILE_ANY_ACCESS)

//
//	signature of LanScsiMiniport IO control.
//
#define NDASSCSI_IOCTL_SIGNATURE "XIMETA_1"

#define NDASSCSI_IOCTL_GET_SLOT_NO			NDASSCSI_CTL_CODE(0x001)
//#define NDASSCSI_IOCTL_READ_ONLY			NDASSCSI_CTL_CODE(0x002)		// To be obsolete
//#define NDASSCSI_IOCTL_QUERYINFO			NDASSCSI_CTL_CODE(0x003)		// To be obsolete
#define NDASSCSI_IOCTL_QUERYINFO_EX			NDASSCSI_CTL_CODE(0x004)
#define NDASSCSI_IOCTL_ADD_TARGET			NDASSCSI_CTL_CODE(0x005)
#define NDASSCSI_IOCTL_REMOVE_TARGET		NDASSCSI_CTL_CODE(0x006)
#define NDASSCSI_IOCTL_ADD_DEVICE			NDASSCSI_CTL_CODE(0x007)
#define NDASSCSI_IOCTL_REMOVE_DEVICE		NDASSCSI_CTL_CODE(0x008)
#define NDASSCSI_IOCTL_UPGRADETOWRITE		NDASSCSI_CTL_CODE(0x009)
#define NDASSCSI_IOCTL_NOOP					NDASSCSI_CTL_CODE(0x00A)
//#define NDASSCSI_IOCTL_RECOVER_TARGET		NDASSCSI_CTL_CODE(0x00B)		// Obsolete
#define NDASSCSI_IOCTL_DELAYEDOP			NDASSCSI_CTL_CODE(0x00C)
#define NDASSCSI_IOCTL_GET_DVD_STATUS		NDASSCSI_CTL_CODE(0x100)
#define NDASSCSI_IOCTL_GET_VERSION			NDASSCSI_CTL_CODE(0x201)

#ifndef NDAS_NO_LSMP_NAMES

#define LSMP_DEVICE_TYPE                            NDASSCSI_DEVICE_TYPE
#define LSMP_CTL_CODE                               NDASSCSI_CTL_CODE
#define LANSCSIMINIPORT_IOCTL_SIGNATURE             NDASSCSI_IOCTL_SIGNATURE

#define LANSCSIMINIPORT_IOCTL_GET_SLOT_NO           NDASSCSI_IOCTL_GET_SLOT_NO
//#define LANSCSIMINIPORT_IOCTL_READ_ONLY			NDASSCSI_IOCTL_READ_ONLY
//#define LANSCSIMINIPORT_IOCTL_QUERYINFO			NDASSCSI_IOCTL_QUERYINFO
#define LANSCSIMINIPORT_IOCTL_QUERYINFO_EX          NDASSCSI_IOCTL_QUERYINFO_EX
#define LANSCSIMINIPORT_IOCTL_ADD_TARGET            NDASSCSI_IOCTL_ADD_TARGET
#define LANSCSIMINIPORT_IOCTL_REMOVE_TARGET         NDASSCSI_IOCTL_REMOVE_TARGET
#define LANSCSIMINIPORT_IOCTL_ADD_DEVICE            NDASSCSI_IOCTL_ADD_DEVICE
#define LANSCSIMINIPORT_IOCTL_REMOVE_DEVICE         NDASSCSI_IOCTL_REMOVE_DEVICE
#define LANSCSIMINIPORT_IOCTL_UPGRADETOWRITE        NDASSCSI_IOCTL_UPGRADETOWRITE
#define LANSCSIMINIPORT_IOCTL_NOOP                  NDASSCSI_IOCTL_NOOP
//#define LANSCSIMINIPORT_IOCTL_RECOVER_TARGET      NDASSCSI_IOCTL_RECOVER_TARGET
#define LANSCSIMINIPORT_IOCTL_DELAYEDOP             NDASSCSI_IOCTL_DELAYEDOP
#define LANSCSIMINIPORT_IOCTL_GET_DVD_STATUS        NDASSCSI_IOCTL_GET_DVD_STATUS
#define LANSCSIMINIPORT_IOCTL_GET_VERSION           NDASSCSI_IOCTL_GET_VERSION

#endif /* NDAS_NO_LSMP_NAMES */


#define ETHERNET_ADDR_LENGTH						6

#define	NDASSCSI_SVCNAME						L"ndasscsi"


//////////////////////////////////////////////////////////////////////////
//
//	Query Ioctl
//
typedef enum _NDASSCSI_INFORMATION_CLASS {

	LsmpAdapterInformation = 1,			// 1
	LsmpPrimaryUnitDiskInformation,		// 2
	LsmpAdapterLurInformation,			// 3
	LsmpDriverVersion,					// 4
	LsmpDelayedOpList					// 5

} NDASSCSI_INFORMATION_CLASS, *PNDASSCSI_INFORMATION_CLASS;

#ifndef NDAS_NO_LSMP_NAMES
#define LSMP_INFORMATION_CLASS  NDASSCSI_INFORMATION_CLASS
#define PLSMP_INFORMATION_CLASS PNDASSCSI_INFORMATION_CLASS
#endif

typedef struct _NDASSCSI_QUERY_INFO_DATA {

	UINT32					   Length;
	NDASSCSI_INFORMATION_CLASS InfoClass;
    UINT32					   SlotNo;				// Optional
	UINT32					   QueryDataLength;
	UCHAR					   QueryData[1];

} NDASSCSI_QUERY_INFO_DATA, *PNDASSCSI_QUERY_INFO_DATA;

#ifndef NDAS_NO_LSMP_NAMES
#define LSMPIOCTL_QUERYINFO  NDASSCSI_QUERY_INFO_DATA
#define PLSMPIOCTL_QUERYINFO PNDASSCSI_QUERY_INFO_DATA
#endif

//
//	single Adapter
//
//	Keep the same values as in ndasscsi.h
//
#define NDASSCSI_ADAPTERINFO_STATUS_MASK            0x000000ff
#define	NDASSCSI_ADAPTERINFO_STATUS_INIT            0x00000000
#define	NDASSCSI_ADAPTERINFO_STATUS_RUNNING         0x00000001
#define NDASSCSI_ADAPTERINFO_STATUS_STOPPING        0x00000002
#define NDASSCSI_ADAPTERINFO_STATUS_IN_ERROR        0x00000003
#define NDASSCSI_ADAPTERINFO_STATUS_STOPPED         0x00000004

#define NDASSCSI_ADAPTERINFO_STATUSFLAG_MASK                0xffffff00
#define NDASSCSI_ADAPTERINFO_STATUSFLAG_RECONNECT_PENDING   0x00000100
#define NDASSCSI_ADAPTERINFO_STATUSFLAG_RESTARTING          0x00000200
#define NDASSCSI_ADAPTERINFO_STATUSFLAG_BUSRESET_PENDING    0x00000400
#define NDASSCSI_ADAPTERINFO_STATUSFLAG_MEMBER_FAULT        0x00000800
#define NDASSCSI_ADAPTERINFO_STATUSFLAG_RECOVERING          0x00001000
#define NDASSCSI_ADAPTERINFO_STATUSFLAG_ABNORMAL_TERMINAT   0x00002000
#define NDASSCSI_ADAPTERINFO_STATUSFLAG_RESETSTATUS         0x01000000

#ifndef NDAS_NO_LSMP_NAMES
#define ADAPTERINFO_STATUS_MASK      NDASSCSI_ADAPTERINFO_STATUS_MASK
#define	ADAPTERINFO_STATUS_INIT      NDASSCSI_ADAPTERINFO_STATUS_INIT
#define	ADAPTERINFO_STATUS_RUNNING   NDASSCSI_ADAPTERINFO_STATUS_RUNNING
#define ADAPTERINFO_STATUS_STOPPING  NDASSCSI_ADAPTERINFO_STATUS_STOPPING
#define ADAPTERINFO_STATUS_IN_ERROR  NDASSCSI_ADAPTERINFO_STATUS_IN_ERROR
#define ADAPTERINFO_STATUS_STOPPED   NDASSCSI_ADAPTERINFO_STATUS_STOPPED

#define ADAPTERINFO_STATUSFLAG_MASK              NDASSCSI_ADAPTERINFO_STATUSFLAG_MASK
#define ADAPTERINFO_STATUSFLAG_RECONNECT_PENDING NDASSCSI_ADAPTERINFO_STATUSFLAG_RECONNECT_PENDING
#define ADAPTERINFO_STATUSFLAG_RESTARTING        NDASSCSI_ADAPTERINFO_STATUSFLAG_RESTARTING
#define ADAPTERINFO_STATUSFLAG_BUSRESET_PENDING  NDASSCSI_ADAPTERINFO_STATUSFLAG_BUSRESET_PENDING
#define ADAPTERINFO_STATUSFLAG_MEMBER_FAULT      NDASSCSI_ADAPTERINFO_STATUSFLAG_MEMBER_FAULT
#define ADAPTERINFO_STATUSFLAG_RECOVERING        NDASSCSI_ADAPTERINFO_STATUSFLAG_RECOVERING
#define ADAPTERINFO_STATUSFLAG_ABNORMAL_TERMINAT NDASSCSI_ADAPTERINFO_STATUSFLAG_ABNORMAL_TERMINAT
#define ADAPTERINFO_STATUSFLAG_RESETSTATUS       NDASSCSI_ADAPTERINFO_STATUSFLAG_RESETSTATUS
#endif

#define LURN_STATUS_INIT							0x00000000
#define LURN_STATUS_RUNNING							0x00000001
#define LURN_STATUS_STALL							0x00000002
#define LURN_STATUS_STOP_PENDING					0x00000003
#define LURN_STATUS_STOP							0x00000004

#ifndef NDASSCSI_USE_MACRO
__forceinline BOOLEAN ADAPTERINFO_ISSTATUS(ULONG AdapterStatus, ULONG Status) {
	return (AdapterStatus & NDASSCSI_ADAPTERINFO_STATUS_MASK) == Status;
}
#else  /* NDASSCSI_USE_MACRO */
#define ADAPTERINFO_ISSTATUS(ADAPTERSTATUS, STATUS)	\
		(((ADAPTERSTATUS) & NDASSCSI_ADAPTERINFO_STATUS_MASK) == (STATUS))
#endif /* NDASSCSI_USE_MACRO */

#ifndef NDASSCSI_USE_MACRO
__forceinline BOOLEAN ADAPTERINFO_ISSTATUSFLAG(ULONG AdapterStatus, ULONG Flags) {
	return ((AdapterStatus & Flags) != 0);
}
#else  /* NDASSCSI_USE_MACRO */
#define ADAPTERINFO_ISSTATUSFLAG(ADAPTERSTATUS, STATUSFLAG)		\
		(((ADAPTERSTATUS) & (STATUSFLAG)) != 0)
#endif /* NDASSCSI_USE_MACRO */

#ifndef NDASSCSI_USE_MACRO
__forceinline BOOLEAN LURN_IS_RUNNING(ULONG LurnStatus) {
	return (LurnStatus == LURN_STATUS_RUNNING) || (LurnStatus == LURN_STATUS_STALL);
}
#else  /* NDASSCSI_USE_MACRO */
#define LURN_IS_RUNNING(LURNSTATUS)				(((LURNSTATUS) == LURN_STATUS_RUNNING) || ((LURNSTATUS) == LURN_STATUS_STALL))
#endif /* NDASSCSI_USE_MACRO */

typedef struct _AdapterInformation {

	UINT32					Length;
	UINT32					SlotNo;
	UCHAR					InitiatorId;
    UCHAR					NumberOfBuses;
    UCHAR					MaximumNumberOfTargets;
    UCHAR					MaximumNumberOfLogicalUnits;
	UINT32					MaxBlocksPerRequest;
	UINT32					Status;

}	LSMP_ADAPTER, *PLSMP_ADAPTER;

typedef struct _LurInformation {

	UINT32					Length;
	UINT32					DevType;
	UINT32					TargetId;
	UINT32					Lun;
	UINT32					DesiredAccess;
	UINT32					GrantedAccess;
	UINT32					LurnCnt;
	UINT16					LowestHwVer;
	UCHAR					Reserved[14];

}	LSMP_LUR, *PLSMP_LUR;

//
//	single UnitDisk
//

#define NDASSCSI_UNITDISK_SF_UPGRADEPENDING 0x00000001
#define NDASSCSI_UNITDISK_SF_UPGRADEDONE    0x00000002

#ifndef NDAS_NO_LSMP_NAMES
#define STATUSFLAG_UPGRADEPENDING	NDASSCSI_UNITDISK_SF_UPGRADEPENDING
#define STATUSFLAG_UPGRADEDONE		NDASSCSI_UNITDISK_SF_UPGRADEDONE
#endif

typedef struct _UnitDiskInformation {

	UINT32					Length;
	TA_LSTRANS_ADDRESS		NetDiskAddress;
	TA_LSTRANS_ADDRESS		BindingAddress;
	UINT32					SlotNo;
	UCHAR					UnitDiskId;
	UCHAR					Reserved;
	UCHAR					UserID[4];
	UCHAR					Password[8];
	ACCESS_MASK				DesiredAccess;
	UINT32					GrantedAccess;
	UINT32					UnitBlocks;
	UINT32					StatusFlags;

}	LSMP_UNITDISK, *PLSMP_UNITDISK;

typedef struct _LurnFullInformation {

	UINT32					Length;
	UINT32					LurnId;
	UINT32					LurnType;
	TA_LSTRANS_ADDRESS		NetDiskAddress;
	TA_LSTRANS_ADDRESS		BindingAddress;
	UCHAR					UnitDiskId;
	UCHAR					Reserved;
	UCHAR					UserID[4];
	UCHAR					Password[8];
	ACCESS_MASK				AccessRight;
	UINT64					UnitBlocks;
	UINT32					StatusFlags;

	UCHAR					Reserved2[16];

}	LSMP_LURN_FULL, *PLSMP_LURN_FULL;

//
//	Adapter Information
//
typedef struct _LSMPIoctl_AdapterInfo {

	UINT32					Length;
	LSMP_ADAPTER			Adapter;

}	LSMPIOCTL_ADAPTERINFO, *PLSMPIOCTL_ADAPTERINFO;

//
//	Primary UnitDisk information
//
typedef struct _LSMPIoctl_PrimUnitDiskInfo {

	UINT32					Length;
	LSMP_ADAPTER			Adapter;
	LSMP_LUR				Lur;
	LARGE_INTEGER			EnabledTime;
	UCHAR					Reserved[16];
	LSMP_UNITDISK			UnitDisk;

}	LSMPIOCTL_PRIMUNITDISKINFO, *PLSMPIOCTL_PRIMUNITDISKINFO;

//
//	Adapter full Information
//
typedef struct _LSMPIoctl_AdapterLurInfo {

	UINT32					Length;
	LSMP_ADAPTER			Adapter;
	LSMP_LUR				Lur;
	LARGE_INTEGER			EnabledTime;
	UCHAR					Reserved[16];
	UINT32					UnitDiskCnt;
	LSMP_LURN_FULL		UnitDisks[1];

}	LSMPIOCTL_ADAPTERLURINFO, *PLSMPIOCTL_ADAPTERLURINFO;

typedef struct _LSMPIoctl_DriverVersionInfo {

	USHORT						VersionMajor;
	USHORT						VersionMinor;
	USHORT						VersionBuild;
	USHORT						VersionPrivate;
	UCHAR						Reserved[16];

}	LSMPIOCTL_DRVVER, *PLSMPIOCTL_DRVVER;

typedef struct _LSMPIoctl_NOOP {

	BYTE						PathId;
	BYTE						TargetId;
	BYTE						Lun;

}	LSMPIOCTL_NOOP, *PLSMPIOCTL_NOOP;

typedef struct _LSMPIOCTL_ADDREMOVE_DELAYEDOP {

	UINT16	Length;
	PCHAR	DelayedOp[1];

} LSMPIOCTL_ADDREMOVE_DELAYEDOP, *PLSMPIOCTL_ADDREMOVE_DELAYEDOP;


#endif
