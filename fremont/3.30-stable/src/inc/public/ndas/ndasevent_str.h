#ifndef _NDAS_EVENT_STR_H_
#define _NDAS_EVENT_STR_H_

#ifndef _NDAS_EVENT_H_
	#error ndasevent_str.h required ndasevent.h included first
#endif

__inline static LPCTSTR NdasEventTypeString(NDAS_EVENT_TYPE eventType)
{
	switch (eventType) 
	{
	case NDAS_EVENT_TYPE_VERSION_INFO:
		return _T("VERSION_INFO");
	case NDAS_EVENT_TYPE_DEVICE_STATUS_CHANGED: 
		return _T("DEVICE_STATUS_CHANGED");
	case NDAS_EVENT_TYPE_LOGICALDEVICE_STATUS_CHANGED: 
		return _T("LOGICALDEVICE_STATUS_CHANGED");
	case NDAS_EVENT_TYPE_LOGICALDEVICE_DISCONNECTED: 
		return _T("LOGICALDEVICE_DISCONNECTED");
//	case NDAS_EVENT_TYPE_LOGICALDEVICE_RECONNECTING: 
//		return _T("LOGICALDEVICE_RECONNECTING");
//	case NDAS_EVENT_TYPE_LOGICALDEVICE_RECONNECTED: 
//		return _T("LOGICALDEVICE_ALIVE");
//	case NDAS_EVENT_TYPE_LOGICALDEVICE_EMERGENCY: 
//		return _T("LOGICALDEVICE_EMERGENCY");
	case NDAS_EVENT_TYPE_LOGICALDEVICE_ALARMED: 
		return _T("LOGICALDEVICE_ALARMED");
	case NDAS_EVENT_TYPE_DEVICE_ENTRY_CHANGED: 
		return _T("DEVICE_ENTRY_CHANGED");
	case NDAS_EVENT_TYPE_LOGICALDEVICE_ENTRY_CHANGED: 
		return _T("LOGICALDEVICE_ENTRY_CHANGED");
	case NDAS_EVENT_TYPE_LOGICALDEVICE_RELATION_CHANGED:
		return _T("LOGICALDEVICE_RELATION_CHANGED");
	case NDAS_EVENT_TYPE_TERMINATING: 
		return _T("TERMINATING");
	case NDAS_EVENT_TYPE_PERIODIC:
		return _T("PERIODIC");
	case NDAS_EVENT_TYPE_DEVICE_PROPERTY_CHANGED:
		return _T("DEVICE_PROPERTY_CHANGED");
	case NDAS_EVENT_TYPE_UNITDEVICE_PROPERTY_CHANGED:
		return _T("UNITDEVICE_PROPERTY_CHANGED");
	case NDAS_EVENT_TYPE_LOGICALDEVICE_PROPERTY_CHANGED:
		return _T("LOGICALDEVICE_PROPERTY_CHANGED");
	case NDAS_EVENT_TYPE_SURRENDER_REQUEST:
		return _T("LOGICALDEVICE_PROPERTY_CHANGED");
	case NDAS_EVENT_TYPE_SUSPEND_REJECTED:
		return _T("TYPE_SUSPEND_REJECTED");
	default: 
		return _T("UNKNOWN_EVENT_TYPE");
	}
}

#endif /* _NDAS_EVENT_STR_H_ */